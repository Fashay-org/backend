name: Deploy Application to EC2

on:
  push:
    branches: 
      - main
      - subhrajit_18jan
      - subhrajit_*

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fashay-app
  EC2_IP: 54.174.191.17
  BACKEND_BRANCH: subhrajit_18jan  # Specify your backend branch here
  FRONTEND_BRANCH: subhrajit_22jan  # Specify your frontend branch here

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout backend repository
      uses: actions/checkout@v2
      with:
        repository: fashay/backend
        path: backend
        ref: ${{ env.BACKEND_BRANCH }}  # Checkout specific backend branch

    - name: Checkout frontend repository
      uses: actions/checkout@v2
      with:
        repository: fashay/frontend
        path: frontend
        ref: ${{ env.FRONTEND_BRANCH }}  # Checkout specific frontend branch

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
        OPENAI_API_KEY2: ${{ secrets.OPENAI_API_KEY2 }}
        QDRANT_KEY: ${{ secrets.QDRANT_KEY }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        LANGCHAIN_ENDPOINT: ${{ secrets.LANGCHAIN_ENDPOINT }}
        QDRANT_URL: ${{ secrets.QDRANT_URL }}
        QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      run: |
        # Create .env file for docker build
        cd backend
        echo "OPENAI_API_KEY2=$OPENAI_API_KEY2" >> .env
        echo "QDRANT_KEY=$QDRANT_KEY" >> .env
        echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY" >> .env
        echo "SUPABASE_KEY=$SUPABASE_KEY" >> .env
        echo "LANGSMITH_API_KEY=$LANGSMITH_API_KEY" >> .env
        echo "LANGCHAIN_ENDPOINT=$LANGCHAIN_ENDPOINT" >> .env
        echo "QDRANT_URL=$QDRANT_URL" >> .env
        echo "QDRANT_API_KEY=$QDRANT_API_KEY" >> .env
        echo "PINECONE_API_KEY=$PINECONE_API_KEY" >> .env
        
        # Debug: List directories to verify frontend files
        echo "Current directory structure:"
        ls -la
        ls -la ../frontend
        
        # Build docker image with both frontend and backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create .env file on EC2
          cat > .env << 'EOL'
          OPENAI_API_KEY2=${{ secrets.OPENAI_API_KEY2 }}
          QDRANT_KEY=${{ secrets.QDRANT_KEY }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}
          LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
          QDRANT_URL=${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
          PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
          EOL
          
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull latest image
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Stop existing containers
          docker stop $(docker ps -q) || true
          
          # Run new container
          docker run -d -p 8000:8000 --env-file .env --workdir /app/backend/ ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest